{"version":3,"sources":["../../lib/src/interfaces.ts","../../lib/src/countdown.timer.ts","../../lib/src/countdown.config.ts","../../lib/src/countdown.component.ts","../../lib/src/countdown.module.ts"],"names":["CountdownStatus","CountdownTimer","ngZone","this","fns","commands","ing","prototype","start","_this","nextTime","Date","runOutsideAngular","process","length","shift","diff","count","Math","floor","i","len","frequency","step","setTimeout","add","fn","push","remove","indexOf","splice","Injectable","NgZone","locale","demand","leftTime","format","timezone","formatDate","_a","date","formatStr","args","providedIn","Inject","LOCALE_ID","CountdownComponent","timer","defCog","cdr","_notify","status","isDestroy","left","event","EventEmitter","begin","callEvent","restart","stop","destroy","init","pause","resume","action","emit","text","config","Object","assign","CountdownGlobalConfig","frq","getLeft","_reflow","reflow","force","apply","Array","isArray","notify","forEach","time","Error","value","prettyText","detectChanges","run","done","end","stopTime","getTime","ngOnInit","ngOnDestroy","ngOnChanges","changes","firstChange","Component","selector","template","host","[class.count-down]","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","ChangeDetectorRef","Input","Output","NgModule","imports","CommonModule","providers","declarations","exports"],"mappings":"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","sourcesContent":["export type CountdownFormatFn = (opt: CountdownFormatFnOption) => string;\n\nexport interface CountdownFormatFnOption {\n  date: number;\n  formatStr: string;\n  timezone?: string;\n}\n\nexport enum CountdownStatus {\n  ing,\n  pause,\n  stop,\n  done,\n}\n\nexport interface CountdownConfig {\n  /**\n   * Start the counter on demand, must call `begin()` to starting, Default: `false`\n   */\n  demand?: boolean;\n\n  /**\n   * Calculate the remaining time based on the server, e.g: `10`,`5.5`, (Unit: seconds)\n   */\n  leftTime?: number;\n\n  /**\n   * Refers to counting down from local time to end time (Unit: Milliseconds second UNIX timestamp)\n   */\n  stopTime?: number;\n\n  /**\n   * Formats a date value, pls refer to [Accepted patterns](https://angular.io/api/common/DatePipe#usage-notes), Default: `HH:mm:ss`\n   */\n  format?: string;\n\n  /**\n   * Beautify text, generally used to convert formatted time text into HTML\n   */\n  prettyText?: (text: string) => string;\n\n  /**\n   * Should be trigger type `notify` event on the x second. When values is `0` will be trigger every time.\n   */\n  notify?: number[] | number;\n\n  /**\n   * Default based on the implementation of `formatDate` in `@angular/common`\n   *\n   * You can changed to other libs, e.g: [date-fns](https://date-fns.org/v2.0.1/docs/format)\n   */\n  formatDate?: CountdownFormatFn;\n\n  /**\n   * A timezone offset (such as '+0430'), or a standard UTC/GMT. When not supplied, uses the end-user's local system timezone, Default: `+0000`\n   */\n  timezone?: string;\n}\n\nexport type CountdownEventAction = 'start' | 'stop' | 'restart' | 'pause' | 'resume' | 'notify' | 'done';\n\nexport interface CountdownEvent {\n  action: CountdownEventAction;\n  status: CountdownStatus;\n  left: number;\n  text: string;\n}\n\nexport interface CountdownItem {\n  text?: string;\n  value?: number;\n}\n","import { Injectable, NgZone } from '@angular/core';\n\n@Injectable()\nexport class CountdownTimer {\n  private fns: Array<((count: number) => number | void) | number> = [];\n  private commands: Array<() => void> = [];\n  private nextTime: number;\n  private ing = false;\n\n  constructor(private ngZone: NgZone) {}\n\n  start(): void {\n    if (this.ing === true) {\n      return;\n    }\n\n    this.ing = true;\n    this.nextTime = +new Date();\n    this.ngZone.runOutsideAngular(() => {\n      this.process();\n    });\n  }\n\n  private process(): void {\n    while (this.commands.length) {\n      this.commands.shift()();\n    }\n    let diff = +new Date() - this.nextTime;\n    const count = 1 + Math.floor(diff / 100);\n\n    diff = 100 - (diff % 100);\n    this.nextTime += 100 * count;\n\n    for (let i = 0, len = this.fns.length; i < len; i += 2) {\n      let frequency = this.fns[i + 1] as number;\n\n      // 100/s\n      if (0 === frequency) {\n        (this.fns[i] as (count: number) => void)(count);\n        // 1000/s\n      } else {\n        // 先把末位至0，再每次加2\n        frequency += 2 * count - 1;\n\n        const step = Math.floor(frequency / 20);\n        if (step > 0) {\n          (this.fns[i] as (count: number) => void)(step);\n        }\n\n        // 把末位还原成1\n        this.fns[i + 1] = (frequency % 20) + 1;\n      }\n    }\n\n    if (!this.ing) {\n      return;\n    }\n\n    setTimeout(() => this.process(), diff);\n  }\n\n  add(fn: () => void, frequency: number): this {\n    this.commands.push(() => {\n      this.fns.push(fn);\n      this.fns.push(frequency === 1000 ? 1 : 0);\n      this.ing = true;\n    });\n    return this;\n  }\n\n  remove(fn: () => void): this {\n    this.commands.push(() => {\n      const i = this.fns.indexOf(fn);\n      if (i !== -1) {\n        this.fns.splice(i, 2);\n      }\n      this.ing = this.fns.length > 0;\n    });\n    return this;\n  }\n}\n","// tslint:disable: no-inferrable-types\nimport { Injectable, Inject, LOCALE_ID } from '@angular/core';\nimport { formatDate } from '@angular/common';\nimport { CountdownFormatFn, CountdownConfig } from './interfaces';\n\n@Injectable({ providedIn: 'root' })\nexport class CountdownGlobalConfig implements CountdownConfig {\n  constructor(@Inject(LOCALE_ID) private locale: string) {}\n\n  demand?: boolean = false;\n\n  leftTime?: number = 0;\n\n  format?: string = 'HH:mm:ss';\n\n  timezone?: string = '+0000';\n\n  formatDate?: CountdownFormatFn = ({ date, formatStr, timezone }) => {\n    return formatDate(new Date(date), formatStr, this.locale, timezone || this.timezone || '+0000');\n    // tslint:disable-next-line: semicolon\n  };\n}\n","import {\n  Component,\n  Input,\n  OnChanges,\n  SimpleChanges,\n  OnDestroy,\n  Output,\n  EventEmitter,\n  OnInit,\n  SimpleChange,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  Inject,\n  LOCALE_ID,\n  ChangeDetectorRef,\n  TemplateRef,\n  NgZone,\n} from '@angular/core';\n\nimport { CountdownConfig, CountdownStatus, CountdownEvent, CountdownEventAction, CountdownItem } from './interfaces';\nimport { CountdownTimer } from './countdown.timer';\nimport { CountdownGlobalConfig } from './countdown.config';\n\n@Component({\n  selector: 'countdown',\n  template: `\n    <ng-container *ngIf=\"!render\">\n      <span [innerHTML]=\"i.text\"></span>\n    </ng-container>\n    <ng-container *ngTemplateOutlet=\"render; context: { $implicit: i }\"></ng-container>\n  `,\n  host: { '[class.count-down]': 'true' },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CountdownComponent implements OnInit, OnChanges, OnDestroy {\n  private frequency = 1000;\n  private _notify: any = {};\n  private status: CountdownStatus = CountdownStatus.ing;\n  private isDestroy = false;\n  i: CountdownItem = {};\n  left = 0;\n\n  @Input() config: CountdownConfig;\n  @Input() render: TemplateRef<void>;\n  @Output() readonly event = new EventEmitter<CountdownEvent>();\n\n  constructor(\n    @Inject(LOCALE_ID) private locale: string,\n    private timer: CountdownTimer,\n    private defCog: CountdownGlobalConfig,\n    private cdr: ChangeDetectorRef,\n    private ngZone: NgZone,\n  ) {}\n\n  /**\n   * Start countdown, you must manually call when `demand: false`\n   */\n  begin(): void {\n    this.status = CountdownStatus.ing;\n    this.callEvent('start');\n  }\n\n  /**\n   * Restart countdown\n   */\n  restart(): void {\n    if (this.status !== CountdownStatus.stop) {\n      this.destroy();\n    }\n    this.init();\n    this.callEvent('restart');\n  }\n\n  /**\n   * Stop countdown, must call `restart` when stopped, it's different from pause, unable to recover\n   */\n  stop(): void {\n    if (this.status === CountdownStatus.stop) {\n      return;\n    }\n    this.status = CountdownStatus.stop;\n    this.destroy();\n    this.callEvent('stop');\n  }\n\n  /**\n   * Pause countdown, you can use `resume` to recover again\n   */\n  pause(): void {\n    if (this.status === CountdownStatus.stop || this.status === CountdownStatus.pause) {\n      return;\n    }\n    this.status = CountdownStatus.pause;\n    this.callEvent('pause');\n  }\n\n  /**\n   * Resume countdown\n   */\n  resume(): void {\n    if (this.status === CountdownStatus.stop || this.status !== CountdownStatus.pause) {\n      return;\n    }\n    this.status = CountdownStatus.ing;\n    this.callEvent('resume');\n  }\n\n  private callEvent(action: CountdownEventAction): void {\n    this.event.emit({ action, left: this.left, status: this.status, text: this.i.text });\n  }\n\n  private init(): void {\n    const { locale, defCog } = this;\n    const config = (this.config = {\n      ...new CountdownGlobalConfig(locale),\n      ...defCog,\n      ...this.config,\n    });\n    // tslint:disable-next-line: no-bitwise\n    const frq = (this.frequency = ~config.format.indexOf('S') ? 100 : 1000);\n    this.status = config.demand ? CountdownStatus.pause : CountdownStatus.ing;\n\n    this.getLeft();\n\n    // bind reflow to me\n    const _reflow = this.reflow;\n    this.reflow = (count: number = 0, force: boolean = false) => _reflow.apply(this, [count, force]);\n\n    if (Array.isArray(config.notify)) {\n      config.notify.forEach((time: number) => {\n        if (time < 1) {\n          throw new Error(`The notify config must be a positive integer.`);\n        }\n\n        time = time * 1000;\n        time = time - (time % frq);\n        this._notify[time] = true;\n      });\n    }\n\n    this.timer.add(this.reflow, frq).start();\n\n    this.reflow(0, true);\n  }\n\n  private destroy(): this {\n    this.timer.remove(this.reflow);\n    return this;\n  }\n\n  /**\n   * 更新时钟\n   */\n  private reflow(count: number = 0, force: boolean = false): void {\n    if (this.isDestroy) {\n      return;\n    }\n\n    const { status, config, _notify } = this;\n    if (!force && status !== CountdownStatus.ing) {\n      return;\n    }\n\n    const value = (this.left = this.left - this.frequency * count);\n    this.i = {\n      value,\n      text: config.formatDate({ date: value, formatStr: config.format, timezone: config.timezone }),\n    };\n    if (typeof config.prettyText === 'function') {\n      this.i.text = config.prettyText(this.i.text);\n    }\n    this.cdr.detectChanges();\n\n    if (config.notify === 0 || _notify[value]) {\n      this.ngZone.run(() => {\n        this.callEvent('notify');\n      });\n    }\n\n    if (value < 1) {\n      this.ngZone.run(() => {\n        this.status = CountdownStatus.done;\n        this.callEvent('done');\n        this.destroy();\n      });\n    }\n  }\n\n  /**\n   * 获取倒计时剩余帧数\n   */\n  private getLeft(): void {\n    const { config, frequency } = this;\n    let left = config.leftTime * 1000;\n    const end = config.stopTime;\n\n    if (!left && end) {\n      left = end - new Date().getTime();\n    }\n\n    this.left = left - (left % frequency);\n  }\n\n  ngOnInit(): void {\n    this.init();\n    if (!this.config.demand) {\n      this.begin();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.isDestroy = true;\n    this.destroy();\n  }\n\n  ngOnChanges(changes: { [P in keyof this]?: SimpleChange } & SimpleChanges): void {\n    if (!changes.config.firstChange) {\n      this.restart();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { CountdownComponent } from './countdown.component';\nimport { CountdownTimer } from './countdown.timer';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [CountdownTimer],\n  declarations: [CountdownComponent],\n  exports: [CountdownComponent],\n})\nexport class CountdownModule {}\n"]}