import { Injectable, NgZone } from '@angular/core';
export class CountdownTimer {
    constructor(ngZone) {
        this.ngZone = ngZone;
        this.fns = [];
        this.commands = [];
        this.ing = false;
    }
    start() {
        if (this.ing === true) {
            return;
        }
        this.ing = true;
        this.nextTime = +new Date();
        this.ngZone.runOutsideAngular(() => {
            this.process();
        });
    }
    process() {
        while (this.commands.length) {
            this.commands.shift()();
        }
        let diff = +new Date() - this.nextTime;
        const count = 1 + Math.floor(diff / 100);
        diff = 100 - (diff % 100);
        this.nextTime += 100 * count;
        for (let i = 0, len = this.fns.length; i < len; i += 2) {
            let frequency = this.fns[i + 1];
            // 100/s
            if (0 === frequency) {
                this.fns[i](count);
                // 1000/s
            }
            else {
                // 先把末位至0，再每次加2
                frequency += 2 * count - 1;
                const step = Math.floor(frequency / 20);
                if (step > 0) {
                    this.fns[i](step);
                }
                // 把末位还原成1
                this.fns[i + 1] = (frequency % 20) + 1;
            }
        }
        if (!this.ing) {
            return;
        }
        setTimeout(() => this.process(), diff);
    }
    add(fn, frequency) {
        this.commands.push(() => {
            this.fns.push(fn);
            this.fns.push(frequency === 1000 ? 1 : 0);
            this.ing = true;
        });
        return this;
    }
    remove(fn) {
        this.commands.push(() => {
            const i = this.fns.indexOf(fn);
            if (i !== -1) {
                this.fns.splice(i, 2);
            }
            this.ing = this.fns.length > 0;
        });
        return this;
    }
}
CountdownTimer.decorators = [
    { type: Injectable }
];
CountdownTimer.ctorParameters = () => [
    { type: NgZone }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY291bnRkb3duLnRpbWVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vbGliL3NyYy9jb3VudGRvd24udGltZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFHbkQsTUFBTSxPQUFPLGNBQWM7SUFNekIsWUFBb0IsTUFBYztRQUFkLFdBQU0sR0FBTixNQUFNLENBQVE7UUFMMUIsUUFBRyxHQUF1RCxFQUFFLENBQUM7UUFDN0QsYUFBUSxHQUFzQixFQUFFLENBQUM7UUFFakMsUUFBRyxHQUFHLEtBQUssQ0FBQztJQUVpQixDQUFDO0lBRXRDLEtBQUs7UUFDSCxJQUFJLElBQUksQ0FBQyxHQUFHLEtBQUssSUFBSSxFQUFFO1lBQ3JCLE9BQU87U0FDUjtRQUVELElBQUksQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDO1FBQ2hCLElBQUksQ0FBQyxRQUFRLEdBQUcsQ0FBQyxJQUFJLElBQUksRUFBRSxDQUFDO1FBQzVCLElBQUksQ0FBQyxNQUFNLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFO1lBQ2pDLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUNqQixDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFTyxPQUFPO1FBQ2IsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sRUFBRTtZQUMzQixJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUM7U0FDekI7UUFDRCxJQUFJLElBQUksR0FBRyxDQUFDLElBQUksSUFBSSxFQUFFLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQztRQUN2QyxNQUFNLEtBQUssR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLEdBQUcsR0FBRyxDQUFDLENBQUM7UUFFekMsSUFBSSxHQUFHLEdBQUcsR0FBRyxDQUFDLElBQUksR0FBRyxHQUFHLENBQUMsQ0FBQztRQUMxQixJQUFJLENBQUMsUUFBUSxJQUFJLEdBQUcsR0FBRyxLQUFLLENBQUM7UUFFN0IsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLENBQUMsR0FBRyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUN0RCxJQUFJLFNBQVMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQVcsQ0FBQztZQUUxQyxRQUFRO1lBQ1IsSUFBSSxDQUFDLEtBQUssU0FBUyxFQUFFO2dCQUNsQixJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBNkIsQ0FBQyxLQUFLLENBQUMsQ0FBQztnQkFDaEQsU0FBUzthQUNWO2lCQUFNO2dCQUNMLGVBQWU7Z0JBQ2YsU0FBUyxJQUFJLENBQUMsR0FBRyxLQUFLLEdBQUcsQ0FBQyxDQUFDO2dCQUUzQixNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsR0FBRyxFQUFFLENBQUMsQ0FBQztnQkFDeEMsSUFBSSxJQUFJLEdBQUcsQ0FBQyxFQUFFO29CQUNYLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUE2QixDQUFDLElBQUksQ0FBQyxDQUFDO2lCQUNoRDtnQkFFRCxVQUFVO2dCQUNWLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsU0FBUyxHQUFHLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQzthQUN4QztTQUNGO1FBRUQsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUU7WUFDYixPQUFPO1NBQ1I7UUFFRCxVQUFVLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ3pDLENBQUM7SUFFRCxHQUFHLENBQUMsRUFBYyxFQUFFLFNBQWlCO1FBQ25DLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRTtZQUN0QixJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUNsQixJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxTQUFTLEtBQUssSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzFDLElBQUksQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDO1FBQ2xCLENBQUMsQ0FBQyxDQUFDO1FBQ0gsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRUQsTUFBTSxDQUFDLEVBQWM7UUFDbkIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFO1lBQ3RCLE1BQU0sQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQy9CLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFO2dCQUNaLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQzthQUN2QjtZQUNELElBQUksQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO1FBQ2pDLENBQUMsQ0FBQyxDQUFDO1FBQ0gsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDOzs7WUE3RUYsVUFBVTs7O1lBRlUsTUFBTSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIE5nWm9uZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgQ291bnRkb3duVGltZXIge1xuICBwcml2YXRlIGZuczogQXJyYXk8KChjb3VudDogbnVtYmVyKSA9PiBudW1iZXIgfCB2b2lkKSB8IG51bWJlcj4gPSBbXTtcbiAgcHJpdmF0ZSBjb21tYW5kczogQXJyYXk8KCkgPT4gdm9pZD4gPSBbXTtcbiAgcHJpdmF0ZSBuZXh0VGltZTogbnVtYmVyO1xuICBwcml2YXRlIGluZyA9IGZhbHNlO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgbmdab25lOiBOZ1pvbmUpIHt9XG5cbiAgc3RhcnQoKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuaW5nID09PSB0cnVlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5pbmcgPSB0cnVlO1xuICAgIHRoaXMubmV4dFRpbWUgPSArbmV3IERhdGUoKTtcbiAgICB0aGlzLm5nWm9uZS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PiB7XG4gICAgICB0aGlzLnByb2Nlc3MoKTtcbiAgICB9KTtcbiAgfVxuXG4gIHByaXZhdGUgcHJvY2VzcygpOiB2b2lkIHtcbiAgICB3aGlsZSAodGhpcy5jb21tYW5kcy5sZW5ndGgpIHtcbiAgICAgIHRoaXMuY29tbWFuZHMuc2hpZnQoKSgpO1xuICAgIH1cbiAgICBsZXQgZGlmZiA9ICtuZXcgRGF0ZSgpIC0gdGhpcy5uZXh0VGltZTtcbiAgICBjb25zdCBjb3VudCA9IDEgKyBNYXRoLmZsb29yKGRpZmYgLyAxMDApO1xuXG4gICAgZGlmZiA9IDEwMCAtIChkaWZmICUgMTAwKTtcbiAgICB0aGlzLm5leHRUaW1lICs9IDEwMCAqIGNvdW50O1xuXG4gICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHRoaXMuZm5zLmxlbmd0aDsgaSA8IGxlbjsgaSArPSAyKSB7XG4gICAgICBsZXQgZnJlcXVlbmN5ID0gdGhpcy5mbnNbaSArIDFdIGFzIG51bWJlcjtcblxuICAgICAgLy8gMTAwL3NcbiAgICAgIGlmICgwID09PSBmcmVxdWVuY3kpIHtcbiAgICAgICAgKHRoaXMuZm5zW2ldIGFzIChjb3VudDogbnVtYmVyKSA9PiB2b2lkKShjb3VudCk7XG4gICAgICAgIC8vIDEwMDAvc1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8g5YWI5oqK5pyr5L2N6IezMO+8jOWGjeavj+asoeWKoDJcbiAgICAgICAgZnJlcXVlbmN5ICs9IDIgKiBjb3VudCAtIDE7XG5cbiAgICAgICAgY29uc3Qgc3RlcCA9IE1hdGguZmxvb3IoZnJlcXVlbmN5IC8gMjApO1xuICAgICAgICBpZiAoc3RlcCA+IDApIHtcbiAgICAgICAgICAodGhpcy5mbnNbaV0gYXMgKGNvdW50OiBudW1iZXIpID0+IHZvaWQpKHN0ZXApO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8g5oqK5pyr5L2N6L+Y5Y6f5oiQMVxuICAgICAgICB0aGlzLmZuc1tpICsgMV0gPSAoZnJlcXVlbmN5ICUgMjApICsgMTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIXRoaXMuaW5nKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgc2V0VGltZW91dCgoKSA9PiB0aGlzLnByb2Nlc3MoKSwgZGlmZik7XG4gIH1cblxuICBhZGQoZm46ICgpID0+IHZvaWQsIGZyZXF1ZW5jeTogbnVtYmVyKTogdGhpcyB7XG4gICAgdGhpcy5jb21tYW5kcy5wdXNoKCgpID0+IHtcbiAgICAgIHRoaXMuZm5zLnB1c2goZm4pO1xuICAgICAgdGhpcy5mbnMucHVzaChmcmVxdWVuY3kgPT09IDEwMDAgPyAxIDogMCk7XG4gICAgICB0aGlzLmluZyA9IHRydWU7XG4gICAgfSk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICByZW1vdmUoZm46ICgpID0+IHZvaWQpOiB0aGlzIHtcbiAgICB0aGlzLmNvbW1hbmRzLnB1c2goKCkgPT4ge1xuICAgICAgY29uc3QgaSA9IHRoaXMuZm5zLmluZGV4T2YoZm4pO1xuICAgICAgaWYgKGkgIT09IC0xKSB7XG4gICAgICAgIHRoaXMuZm5zLnNwbGljZShpLCAyKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuaW5nID0gdGhpcy5mbnMubGVuZ3RoID4gMDtcbiAgICB9KTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxufVxuIl19